// Lightbulbs.Client Program.cs
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.SemanticKernel;
using Microsoft.SemanticKernel.ChatCompletion;
using Microsoft.SemanticKernel.Connectors.Google;
using Microsoft.Extensions.Logging;
using ModelContextProtocol.Client;
using ModelContextProtocol.Protocol.Transport;

var builder = Host.CreateApplicationBuilder(args);

builder.Configuration
    .AddEnvironmentVariables()
    .AddUserSecrets<Program>();

// ✅ Get Gemini keys from secrets/config
var geminiModelId = builder.Configuration["Gemini:ModelId"];
var geminiApiKey = builder.Configuration["Gemini:ApiKey"];

if (string.IsNullOrWhiteSpace(geminiModelId) || string.IsNullOrWhiteSpace(geminiApiKey))
{
    Console.WriteLine("❌ Gemini model ID or API key missing in configuration.");
    return;
}

// ✅ Setup Semantic Kernel with Gemini
var kernelBuilder = Kernel.CreateBuilder();
kernelBuilder.AddGoogleAIGeminiChatCompletion(
    modelId: geminiModelId,
    apiKey: geminiApiKey
);
kernelBuilder.Services.AddLogging(logging => logging.AddConsole().SetMinimumLevel(LogLevel.Trace));
var kernel = kernelBuilder.Build();
var chatCompletionService = kernel.GetRequiredService<IChatCompletionService>();

// ✅ Setup MCP client (C# only)
var (command, arguments) = GetCommandAndArguments(args);
var clientTransport = new StdioClientTransport(new()
{
    Name = "Lightbulb MCP Server",
    Command = command,
    Arguments = arguments,
});

await using var mcpClient = await McpClientFactory.CreateAsync(clientTransport);

// ✅ Discover tools from MCP server
var tools = await mcpClient.ListToolsAsync();
foreach (var tool in tools)
{
    Console.WriteLine($"🔌 Connected MCP Tool: {tool.Name}");
}

// ✅ User interaction loop
Console.WriteLine("💡 Lightbulbs Client Started!");
PromptForInput();

while (Console.ReadLine() is string query && !"exit".Equals(query, StringComparison.OrdinalIgnoreCase))
{
    if (string.IsNullOrWhiteSpace(query))
    {
        PromptForInput();
        continue;
    }

    var history = new ChatHistory();
    history.AddSystemMessage("You are a friendly assistant who helps users manage bulbs. " +
        "You have access to a plugin called \"DatabasePlugin\" with a function called get_lights. " +
        "Use it when the user asks about bulbs or lights. Respond in the user's language and keep it conversational.");
    history.AddUserMessage(query);

    try
    {
        // ✅ Let Gemini handle query (and call MCP tools if needed)
        var result = await chatCompletionService.GetChatMessageContentAsync(
            history,
            kernel: kernel
        );

        Console.ForegroundColor = ConsoleColor.Yellow;
        Console.WriteLine($"🤖 {result.Content ?? "No response."}");
        Console.ResetColor();
    }
    catch (Exception ex)
    {
        Console.ForegroundColor = ConsoleColor.Red;
        Console.WriteLine($"Error: {ex.Message}");
        Console.ResetColor();
    }

    PromptForInput();
}

//
// 🔹 Helper Methods
//

static void PromptForInput()
{
    Console.WriteLine();
    Console.WriteLine("Enter a command (or 'exit' to quit):");
    Console.ForegroundColor = ConsoleColor.Cyan;
    Console.Write("> ");
    Console.ResetColor();
}

// ✅ Only support C# MCP servers (.csproj)
static (string command, string[] arguments) GetCommandAndArguments(string[] args)
{
    return args switch
    {
        [var script] when Directory.Exists(script) || (File.Exists(script) && script.EndsWith(".csproj"))
            => ("dotnet", ["run", "--project", script, "--no-build"]),
        _ => throw new NotSupportedException("Unsupported MCP server. Expected a .NET project (.csproj).")
    };
}
